---
# Copyright 2021 Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: v1
kind: Namespace
metadata:
  name: pipelines-as-code
  labels:
    app.kubernetes.io/instance: default
    app.kubernetes.io/part-of: pipelines-as-code
---
# Copyright 2021 Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# TODO: We should probably split between the SA running the trigger and the SA
# running the pipelinerun as code

apiVersion: v1
kind: ServiceAccount
metadata:
  name: pipelines-as-code-sa-el
  namespace: pipelines-as-code
  labels:
    app.kubernetes.io/instance: default
    app.kubernetes.io/part-of: pipelines-as-code
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pipelines-as-code-role-el
  namespace: pipelines-as-code
  labels:
    app.kubernetes.io/instance: default
    app.kubernetes.io/part-of: pipelines-as-code
rules:
  - apiGroups: ["triggers.tekton.dev"]
    resources: ["eventlisteners", "triggerbindings", "triggertemplates", "triggers"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    # secrets are only needed for Github/Gitlab interceptors, serviceaccounts only for per trigger authorization
    resources: ["configmaps", "secrets"]
    verbs: ["get", "list", "watch"]
  # Permissions to create resources in associated TriggerTemplates
  - apiGroups: ["tekton.dev"]
    resources: ["pipelineruns", "taskruns"]
    verbs: ["create"]
  - apiGroups: [""]
    resources: ["serviceaccounts"]
    verbs: ["impersonate"]
  - apiGroups: ["policy"]
    resources: ["podsecuritypolicies"]
    resourceNames: ["tekton-triggers"]
    verbs: ["use"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: pipelines-as-code-binding
  namespace: pipelines-as-code
  labels:
    app.kubernetes.io/instance: default
    app.kubernetes.io/part-of: pipelines-as-code
subjects:
  - kind: ServiceAccount
    name: pipelines-as-code-sa-el
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: pipelines-as-code-role-el

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openshift-pipeline-as-code-clusterrole
  namespace: pipelines-as-code
  labels:
    app.kubernetes.io/instance: default
    app.kubernetes.io/part-of: pipelines-as-code
rules:
  # Permissions to list repositories on cluster
  - apiGroups: [""]
    resources: ["namespaces", "pods", "pods/log"]
    verbs: ["get", "list", "watch"]
  # Permissions to list repositories on cluster
  - apiGroups: ["pipelinesascode.tekton.dev"]
    resources: ["repositories"]
    verbs: ["get", "list", "update"]
  - apiGroups: ["triggers.tekton.dev"]
    resources: ["clustertriggerbindings", "clusterinterceptors"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["tekton.dev"]
    resources: ["pipelineruns"]
    verbs: ["get", "delete", "list", "create", "watch"]
  - apiGroups: ["tekton.dev"]
    resources: ["taskruns"]
    verbs: ["get"]
  - apiGroups: ["route.openshift.io"]
    resources: ["routes"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: pipelines-as-code-clusterbinding
  namespace: pipelines-as-code
  labels:
    app.kubernetes.io/instance: default
    app.kubernetes.io/part-of: pipelines-as-code
subjects:
- kind: ServiceAccount
  name: pipelines-as-code-sa-el
  namespace: pipelines-as-code
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: openshift-pipeline-as-code-clusterrole
---
# Copyright 2021 Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: repositories.pipelinesascode.tekton.dev
  labels:
    app.kubernetes.io/instance: default
    app.kubernetes.io/part-of: pipelines-as-code
spec:
  group: pipelinesascode.tekton.dev
  versions:
    - name: v1alpha1
      subresources:
        status: {}
      additionalPrinterColumns:
        - jsonPath: .spec.url
          name: URL
          type: string
        - jsonPath: .spec.event_type
          name: EventType
          type: string
        - jsonPath: .spec.branch
          name: Branch
          type: string
        - name: Succeeded
          type: string
          jsonPath: ".pipelinerun_status[-1].conditions[?(@.type==\"Succeeded\")].status"
        - name: Reason
          type: string
          jsonPath: ".pipelinerun_status[-1].conditions[?(@.type==\"Succeeded\")].reason"
        - name: StartTime
          type: date
          jsonPath: ".pipelinerun_status[-1].startTime"
        - name: CompletionTime
          type: date
          jsonPath: ".pipelinerun_status[-1].completionTime"
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          x-kubernetes-preserve-unknown-fields: true
          description: Schema for the repository API
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/  api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this
                object represents. Servers may infer this from the endpoint the client
                submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: Spec defines the desired state of Repository
              properties:
                url:
                  description: Repository URL
                  type: string
                branch:
                  description: Branch
                  type: string
                event_type:
                  description: Event Type
                  type: string
                namespace:
                  description: Namespace
                  type: string
              type: object
          type: object
  scope: Namespaced
  names:
    plural: repositories
    singular: repository
    kind: Repository
    shortNames:
    - repo
---
# Copyright 2021 Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
data:
  # The number of days kept for pipelinerun inside pipelines-as-code namespace
  max-keep-days: "5"

  # The application name, you can customize this label
  application-name: "Pipelines as Code"
kind: ConfigMap
metadata:
  name: pipelines-as-code
  namespace: pipelines-as-code
  labels:
    app.kubernetes.io/part-of: pipelines-as-code
---
# Copyright 2021 Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: pipelines-as-code-pr-cleanup
  namespace: pipelines-as-code
  labels:
    app.kubernetes.io/part-of: pipelines-as-code
spec:
  concurrencyPolicy: Replace
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - command:
            - /bin/bash
            - -c
            - test -e /etc/config/max-keep-days && export MAX_DAY_KEEP=$(cat /etc/config/max-keep-days);for pr in $(kubectl get pipelineruns -l app.kubernetes.io/managed-by=pipelines-as-code -o json | python3 -c "import
              os, sys, datetime, json;jeez=json.load(sys.stdin);res=[ i['metadata']['name']
              for i in jeez['items'] if datetime.datetime.now() > datetime.datetime.strptime(i['metadata']['creationTimestamp'],
              '%Y-%m-%dT%H:%M:%SZ') + datetime.timedelta(days=int(os.environ.get('MAX_DAY_KEEP', 1))) ];print(' '.join(res))");do
              kubectl delete pipelinerun ${pr};done
            image: quay.io/openshift/origin-cli:4.8
            imagePullPolicy: IfNotPresent
            name: cleanup
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
              - name: config-volume
                mountPath: /etc/config
            env:
              - name: MAX_DAY_KEEP
                value: "1"
          dnsPolicy: ClusterFirst
          restartPolicy: Never
          schedulerName: default-scheduler
          serviceAccount: pipeline
          serviceAccountName: pipeline
          terminationGracePeriodSeconds: 30
          volumes:
            - name: config-volume
              configMap:
                name: pipelines-as-code
                optional: true
  schedule: "0 * * * *"
  successfulJobsHistoryLimit: 1
  suspend: false
---
# Copyright 2021 Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: triggers.tekton.dev/v1alpha1
kind: EventListener
metadata:
  name: pipelines-as-code-interceptor
  namespace: pipelines-as-code
  labels:
    app.kubernetes.io/instance: default
    app.kubernetes.io/part-of: pipelines-as-code
spec:
  serviceAccountName: pipelines-as-code-sa-el
  triggers:
    # When you have a /retest in a comment to retest a PR
    - name: github-issue-comment-retest
      bindings:
        - ref: pipelines-as-code-bindings-retest-comment
      interceptors:
        - github:
            secretRef:
              secretName: "github-app-secret"
              secretKey: "webhook.secret"
            eventTypes:
              - issue_comment
        - cel:
            filter: >-
              body.action == 'created' &&
              'pull_request' in body.issue &&
              body.issue.state == 'open' &&
              'installation' in body &&
              body.comment.body.matches('(^|\\r\\n)/retest([ ]*$|$|\\r\\n)')
      template:
        ref: pipelines-as-code-template-retest-comment

    # When you have a /ok-to-test in a comment to allow CI on a non owner sender
    - name: github-issue-comment-retest
      bindings:
        - ref: pipelines-as-code-bindings-ok-to-test-comment
      interceptors:
        - github:
            secretRef:
              secretName: "github-app-secret"
              secretKey: "webhook.secret"
            eventTypes:
              - issue_comment
        - cel:
            filter: >-
              body.action == 'created' &&
              'pull_request' in body.issue &&
              body.issue.state == 'open' &&
              'installation' in body &&
              body.comment.body.matches('(^|\\r\\n)/ok-to-test([ ]*$|$|\\r\\n)')
      template:
        # Using retest comment since it was the first one
        ref: pipelines-as-code-template-retest-comment

    # Branch push using different binding but same triggertemplate as pullreq
    - name: github-branch-push
      bindings:
        - ref: pipelines-as-code-bindings-push
      interceptors:
        - github:
            secretRef:
              secretName: "github-app-secret"
              secretKey: "webhook.secret"
            eventTypes:
              - push
        - cel:
            filter: >-
              'installation' in body &&
              'pusher' in body
      template:
        ref: pipelines-as-code-template-push

    # When using the UI and clicking on Re-run failed test
    - name: github-check-run-recheck
      bindings:
        - ref: pipelines-as-code-bindings-recheck
      interceptors:
        - github:
            secretRef:
              secretName: "github-app-secret"
              secretKey: "webhook.secret"
            eventTypes:
              - check_run
        - cel:
            filter: >-
              body.action in ['rerequested'] && 'check_run' in body && 'installation' in body
      template:
        ref: pipelines-as-code-template-recheck

    # When sending a new Pull Request
    - name: github-pull-request
      bindings:
        - ref: pipelines-as-code-bindings-pullreq
      interceptors:
        - github:
            secretRef:
              secretName: "github-app-secret"
              secretKey: "webhook.secret"
            eventTypes:
              - pull_request
        - cel:
            filter: >-
              body.action in ['created', 'synchronize', 'opened'] && 'installation' in body
      template:
        ref: pipelines-as-code-template-pullreq
# Triggers >0.13 Changed almost everything for EventListener
# ---
# apiVersion: triggers.tekton.dev/v1alpha1
# kind: EventListener
# metadata:
#   name: pipelines-as-code-interceptor
#   namespace: pipelines-as-code
#   labels:
#     app.kubernetes.io/instance: default
#     app.kubernetes.io/part-of: pipelines-as-code
# spec:
#   triggers:
#     - name: github-listener
#       interceptors:
#         # TODO: Add webhook secret
#         - ref:
#             name: github-listener
#           params:
#             - name: "eventTypes"
#               value: ["pull_request", "issue_comment"]
#         - name: "Only form a Github APP and PR Opened, Created, Syncronized"
#           ref:
#             name: "cel"
#           params:
#             - name: "filter"
#               value: "body.action in ['created', 'opened', 'synchronize'] && 'installation' in body"
#       bindings:
#         - ref: pipelines-as-code-bindings
#       template:
#         ref: pipelines-as-code-template
#   resources:
#     kubernetesResource:
#       spec:
#         template:
#           spec:
#             serviceAccountName: pipelines-as-code-sa-el
---
# Copyright 2021 Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerBinding
metadata:
  name: pipelines-as-code-bindings-recheck
  namespace: pipelines-as-code
  labels:
    app.kubernetes.io/instance: default
    app.kubernetes.io/part-of: pipelines-as-code
spec:
  params:
    - name: action
      value: $(body.action)
    - name: head_branch
      value: $(body.check_run.check_suite.head_branch)
    - name: head_sha
      value: $(body.check_run.check_suite.head_sha)
    - name: trigger_target
      value: "issue-recheck"
    - name: event_type
      value: $(header.X-GitHub-Event)
    - name: "ghe_host"
      value: $(header.X-GitHub-Enterprise-Host)
    - name: owner
      value: $(body.repository.owner.login)
    - name: repository
      value: $(body.repository.name)
    - name: url
      value: $(body.repository.html_url)
    - name: default_branch
      value: $(body.repository.default_branch)
    - name: pull_request_number
      value: $(body.check_run.check_suite.pull_requests[?(@.number)].number)
    - name: sender
      value: $(body.sender.login)
    - name: installation_id
      value: $(body.installation.id)

---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: pipelines-as-code-template-recheck
  namespace: pipelines-as-code
  labels:
    app.kubernetes.io/instance: default
    app.kubernetes.io/part-of: pipelines-as-code
spec:
  params:
    - name: action
    - name: head_branch
    - name: head_sha
    - name: event_type
    - name: owner
    - name: repository
    - name: default_branch
    - name: url
    - name: pull_request_number
    - name: sender
    - name: installation_id
    - name: trigger_target
    - name: ghe_host
      default: "api.github.com"
  resourcetemplates:
    - apiVersion: tekton.dev/v1beta1
      kind: PipelineRun
      metadata:
        generateName: pipelines-as-code-run-
        labels:
          app.kubernetes.io/managed-by: pipelines-as-code
          tekton.dev/pipelines-as-code-event: $(tt.params.event_type)
      spec:
        serviceAccountName: pipelines-as-code-sa-el
        params:
          - name: action
            value: $(tt.params.action)
          - name: event_type
            value: $(tt.params.event_type)
          - name: head_branch
            value: $(tt.params.head_branch)
          - name: head_sha
            value: $(tt.params.head_sha)
          - name: owner
            value: $(tt.params.owner)
          - name: repository
            value: $(tt.params.repository)
          - name: default_branch
            value: $(tt.params.default_branch)
          - name: url
            value: $(tt.params.url)
          - name: pull_request_number
            value: $(tt.params.pull_request_number)
          - name: sender
            value: $(tt.params.sender)
          - name: installation_id
            value: $(tt.params.installation_id)
          - name: trigger_target
            value: $(tt.params.trigger_target)
          - name: ghe_host
            value: $(tt.params.ghe_host)
        pipelineSpec:
          params:
            - name: trigger_target
            - name: action
            - name: head_branch
            - name: head_sha
            - name: event_type
            - name: owner
            - name: repository
            - name: default_branch
            - name: url
            - name: pull_request_number
            - name: sender
            - name: installation_id
            - name: ghe_host
          workspaces:
            - name: secrets
          tasks:
            - name: get-token
              taskRef:
                name: github-app-token
              params:
                - name: github_api_url
                  value: $(params.ghe_host)
                - name: installation_id
                  value: $(params.installation_id)
              workspaces:
                - name: secrets
                  workspace: secrets
            - name: pipelines-as-code
              runAfter: [get-token]
              taskSpec:
                params:
                  - name: ghe_host
                    type: string
                  - name: action
                    type: string
                  - name: head_branch
                    type: string
                  - name: head_sha
                    type: string
                  - name: event_type
                    type: string
                  - name: owner
                    type: string
                  - name: repository
                    type: string
                  - name: default_branch
                    type: string
                  - name: url
                    type: string
                  - name: pull_request_number
                    type: string
                    default: "000"
                  - name: sender
                    type: string
                  - name: token
                    type: string
                  - name: trigger_target
                    type: string
                steps:
                  - name: apply-and-launch
                    imagePullPolicy: Always
                    image: "quay.io/openshift-pipeline/pipelines-as-code:0.1"
                    env:
                    - name: PAC_APPLICATION_NAME
                      valueFrom:
                        configMapKeyRef:
                          name: pipelines-as-code
                          key: application-name
                    script: |
                      #!/usr/bin/env bash
                      set -eux
                      prnumber=$(params.pull_request_number)
                      [[ ${prnumber} != "[]" ]] && prnumber="[{\"number\": ${prnumber}}]"
                      cat << EOF > /tmp/payload.json
                      {
                        "action": "$(params.action)",
                        "check_run": {
                          "check_suite": {
                            "head_branch": "$(params.head_branch)",
                            "head_sha": "$(params.head_sha)",
                            "pull_requests": ${prnumber}
                          }
                        },
                        "repository": {
                          "default_branch": "$(params.default_branch)",
                          "html_url": "$(params.url)",
                          "name": "$(params.repository)",
                          "owner": {
                            "login": "$(params.owner)"
                          }
                        },
                        "sender": {
                          "login": "$(params.sender)"
                        }
                      }
                      EOF
                      cat /tmp/payload.json
                      pipelines-as-code --trigger-target=$(params.trigger_target) \
                        --api-url="$(params.ghe_host)" \
                        --payload-file=/tmp/payload.json --token="$(params.token)" --webhook-type="$(params.event_type)"

              params:
                - name: ghe_host
                  value: $(params.ghe_host)
                - name: action
                  value: "$(params.action)"
                - name: head_branch
                  value: "$(params.head_branch)"
                - name: head_sha
                  value: "$(params.head_sha)"
                - name: trigger_target
                  value: "$(params.trigger_target)"
                - name: event_type
                  value: "$(params.event_type)"
                - name: owner
                  value: "$(params.owner)"
                - name: url
                  value: "$(params.url)"
                - name: repository
                  value: "$(params.repository)"
                - name: default_branch
                  value: "$(params.default_branch)"
                - name: pull_request_number
                  value: "$(params.pull_request_number)"
                - name: sender
                  value: "$(params.sender)"
                - name: token
                  value: "$(tasks.get-token.results.token)"
        workspaces:
          - name: secrets
            secret:
              secretName: github-app-secret
---
# Copyright 2021 Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerBinding
metadata:
  name: pipelines-as-code-bindings-pullreq
  namespace: pipelines-as-code
  labels:
    app.kubernetes.io/instance: default
    app.kubernetes.io/part-of: pipelines-as-code
spec:
  params:
    - name: trigger_target
      value: "pull-request"
    - name: "event_type"
      value: $(header.X-GitHub-Event)
    - name: "ghe_host"
      value: $(header.X-GitHub-Enterprise-Host)
    - name: "owner"
      value: $(body.repository.owner.login)
    - name: "repository"
      value: $(body.repository.name)
    - name: "default_branch"
      value: $(body.repository.default_branch)
    - name: "url"
      value: $(body.repository.html_url)
    - name: "sender"
      value: $(body.pull_request.user.login)
    - name: "base_ref"
      value: $(body.pull_request.base.ref)
    - name: "sha"
      value: $(body.pull_request.head.sha)
    - name: "head_ref"
      value: $(body.pull_request.head.ref)
    - name: "installation_id"
      value: $(body.installation.id)

---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: pipelines-as-code-template-pullreq
  namespace: pipelines-as-code
  labels:
    app.kubernetes.io/instance: default
    app.kubernetes.io/part-of: pipelines-as-code
spec:
  params:
    - name: event_type
    - name: owner
    - name: repository
    - name: default_branch
    - name: url
    - name: sender
    - name: base_ref
    - name: sha
    - name: head_ref
    - name: installation_id
    - name: trigger_target
    - name: ghe_host
      default: "api.github.com"
  resourcetemplates:
    - apiVersion: tekton.dev/v1beta1
      kind: PipelineRun
      metadata:
        generateName: pipelines-as-code-run-
        labels:
          app.kubernetes.io/managed-by: pipelines-as-code
          tekton.dev/pipelines-as-code-event: $(tt.params.event_type)
      spec:
        serviceAccountName: pipelines-as-code-sa-el
        params:
          - name: ghe_host
            value: $(tt.params.ghe_host)
          - name: event_type
            value: $(tt.params.event_type)
          - name: trigger_target
            value: $(tt.params.trigger_target)
          - name: owner
            value: $(tt.params.owner)
          - name: repository
            value: $(tt.params.repository)
          - name: default_branch
            value: $(tt.params.default_branch)
          - name: url
            value: $(tt.params.url)
          - name: sender
            value: $(tt.params.sender)
          - name: base_ref
            value: $(tt.params.base_ref)
          - name: sha
            value: $(tt.params.sha)
          - name: head_ref
            value: $(tt.params.head_ref)
          - name: installation_id
            value: $(tt.params.installation_id)
        pipelineSpec:
          params:
            - name: ghe_host
            - name: event_type
            - name: trigger_target
            - name: owner
            - name: repository
            - name: default_branch
            - name: url
            - name: sender
            - name: base_ref
            - name: sha
            - name: head_ref
            - name: installation_id
          workspaces:
            - name: secrets
          tasks:
            - name: get-token
              taskRef:
                name: github-app-token
              params:
                - name: github_api_url
                  value: $(params.ghe_host)
                - name: installation_id
                  value: $(params.installation_id)
              workspaces:
                - name: secrets
                  workspace: secrets
            - name: pipelines-as-code
              runAfter: [get-token]
              taskSpec:
                params:
                  - name: ghe_host
                    type: string
                  - name: trigger_target
                    type: string
                  - name: event_type
                    type: string
                  - name: owner
                    type: string
                  - name: repository
                    type: string
                  - name: default_branch
                    type: string
                  - name: url
                    type: string
                  - name: sender
                    type: string
                  - name: base_ref
                    type: string
                  - name: sha
                    type: string
                  - name: head_ref
                    type: string
                  - name: token
                    type: string
                steps:
                  - name: apply-and-launch
                    env:
                    - name: PAC_APPLICATION_NAME
                      valueFrom:
                        configMapKeyRef:
                          name: pipelines-as-code
                          key: application-name
                    imagePullPolicy: Always
                    image: "quay.io/openshift-pipeline/pipelines-as-code:0.1"
                    script: |
                      cat << EOF > /tmp/payload.json
                      {
                          "repository": {
                              "owner": {
                                  "login": "$(params.owner)"
                              },
                              "name": "$(params.repository)",
                              "default_branch": "$(params.default_branch)",
                              "html_url": "$(params.url)"
                          },
                          "pull_request": {
                              "user": {
                                  "login": "$(params.sender)"
                              },
                              "base": {
                                  "ref": "$(params.base_ref)"
                              },
                              "head": {
                                  "sha": "$(params.sha)",
                                  "ref": "$(params.head_ref)"
                              }
                          }
                      }
                      EOF
                      cat /tmp/payload.json
                      pipelines-as-code --trigger-target=$(params.trigger_target) \
                        --api-url="$(params.ghe_host)" \
                        --payload-file=/tmp/payload.json --token="$(params.token)" \
                        --webhook-type="$(params.event_type)"
              params:
                - name: ghe_host
                  value: $(params.ghe_host)
                - name: event_type
                  value: $(params.event_type)
                - name: trigger_target
                  value: $(params.trigger_target)
                - name: owner
                  value: $(params.owner)
                - name: repository
                  value: $(params.repository)
                - name: default_branch
                  value: $(params.default_branch)
                - name: url
                  value: $(params.url)
                - name: sender
                  value: $(params.sender)
                - name: base_ref
                  value: $(params.base_ref)
                - name: sha
                  value: $(params.sha)
                - name: head_ref
                  value: $(params.head_ref)
                - name: token
                  value: "$(tasks.get-token.results.token)"

        workspaces:
          - name: secrets
            secret:
              secretName: github-app-secret
---
# Copyright 2021 Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerBinding
metadata:
  name: pipelines-as-code-bindings-push
  namespace: pipelines-as-code
  labels:
    app.kubernetes.io/instance: default
    app.kubernetes.io/part-of: pipelines-as-code
spec:
  params:
    - name: "event_type"
      value: $(header.X-GitHub-Event)
    - name: "ghe_host"
      value: $(header.X-GitHub-Enterprise-Host)
    - name: "trigger_target"
      value: "push"
    - name: "owner"
      value: $(body.repository.owner.login)
    - name: "repository"
      value: $(body.repository.name)
    - name: "default_branch"
      value: $(body.repository.default_branch)
    - name: "sha"
      value: $(body.head_commit.id)
    - name: "url"
      value: $(body.repository.html_url)
    - name: "sender"
      value: $(body.sender.login)
    - name: "base_ref"
      value: $(body.ref)
    - name: "head_ref"  # head ref is the same as base ref
      value: $(body.ref)
    - name: "installation_id"
      value: $(body.installation.id)

---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: pipelines-as-code-template-push
  namespace: pipelines-as-code
  labels:
    app.kubernetes.io/instance: default
    app.kubernetes.io/part-of: pipelines-as-code
spec:
  params:
    - name: event_type
    - name: ghe_host
      default: "api.github.com"
    - name: owner
    - name: repository
    - name: default_branch
    - name: url
    - name: sender
    - name: base_ref
    - name: sha
    - name: head_ref
    - name: installation_id
    - name: trigger_target
  resourcetemplates:
    - apiVersion: tekton.dev/v1beta1
      kind: PipelineRun
      metadata:
        generateName: pipelines-as-code-run-
        labels:
          app.kubernetes.io/managed-by: pipelines-as-code
          tekton.dev/pipelines-as-code-event: $(tt.params.event_type)
      spec:
        serviceAccountName: pipelines-as-code-sa-el
        params:
          - name: ghe_host
            value: $(tt.params.ghe_host)
          - name: event_type
            value: $(tt.params.event_type)
          - name: trigger_target
            value: $(tt.params.trigger_target)
          - name: owner
            value: $(tt.params.owner)
          - name: repository
            value: $(tt.params.repository)
          - name: default_branch
            value: $(tt.params.default_branch)
          - name: url
            value: $(tt.params.url)
          - name: sender
            value: $(tt.params.sender)
          - name: base_ref
            value: $(tt.params.base_ref)
          - name: sha
            value: $(tt.params.sha)
          - name: head_ref
            value: $(tt.params.head_ref)
          - name: installation_id
            value: $(tt.params.installation_id)
        pipelineSpec:
          params:
            - name: ghe_host
            - name: event_type
            - name: trigger_target
            - name: owner
            - name: repository
            - name: default_branch
            - name: url
            - name: sender
            - name: base_ref
            - name: sha
            - name: head_ref
            - name: installation_id
          workspaces:
            - name: secrets
          tasks:
            - name: get-token
              taskRef:
                name: github-app-token
              params:
                - name: github_api_url
                  value: $(params.ghe_host)
                - name: installation_id
                  value: $(params.installation_id)
              workspaces:
                - name: secrets
                  workspace: secrets
            - name: pipelines-as-code
              runAfter: [get-token]
              taskSpec:
                params:
                  - name: ghe_host
                    type: string
                  - name: trigger_target
                    type: string
                  - name: event_type
                    type: string
                  - name: owner
                    type: string
                  - name: repository
                    type: string
                  - name: default_branch
                    type: string
                  - name: url
                    type: string
                  - name: sender
                    type: string
                  - name: base_ref
                    type: string
                  - name: sha
                    type: string
                  - name: head_ref
                    type: string
                  - name: token
                    type: string
                steps:
                  - name: apply-and-launch
                    imagePullPolicy: Always
                    image: "quay.io/openshift-pipeline/pipelines-as-code:0.1"
                    env:
                    - name: PAC_APPLICATION_NAME
                      valueFrom:
                        configMapKeyRef:
                          name: pipelines-as-code
                          key: application-name
                    script: |
                      cat << EOF > /tmp/payload.json
                      {
                        "repository": {
                          "owner": {
                            "login": "$(params.owner)"
                          },
                          "name": "$(params.repository)",
                          "default_branch": "$(params.default_branch)",
                          "html_url": "$(params.url)"
                        },
                        "sender": {
                          "login": "$(params.sender)"
                        },
                        "ref": "$(params.base_ref)",
                        "head_commit": {
                          "id": "$(params.sha)"
                        }
                      }
                      EOF
                      pipelines-as-code --trigger-target=$(params.trigger_target) \
                        --api-url="$(params.ghe_host)" \
                        --payload-file=/tmp/payload.json --token="$(params.token)" --webhook-type="$(params.event_type)"
              params:
                - name: ghe_host
                  value: $(params.ghe_host)
                - name: event_type
                  value: $(params.event_type)
                - name: trigger_target
                  value: $(params.trigger_target)
                - name: owner
                  value: $(params.owner)
                - name: repository
                  value: $(params.repository)
                - name: default_branch
                  value: $(params.default_branch)
                - name: url
                  value: $(params.url)
                - name: sender
                  value: $(params.sender)
                - name: base_ref
                  value: $(params.base_ref)
                - name: sha
                  value: $(params.sha)
                - name: head_ref
                  value: $(params.head_ref)
                - name: token
                  value: "$(tasks.get-token.results.token)"

        workspaces:
          - name: secrets
            secret:
              secretName: github-app-secret
---
# Copyright 2021 Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerBinding
metadata:
  name: pipelines-as-code-bindings-retest-comment
  namespace: pipelines-as-code
  labels:
    app.kubernetes.io/instance: default
    app.kubernetes.io/part-of: pipelines-as-code
spec:
  params:
    - name: trigger_target
      value: "retest-comment"
    - name: action
      value: $(body.action)
    - name: event_type
      value: $(header.X-GitHub-Event)
    - name: "ghe_host"
      value: $(header.X-GitHub-Enterprise-Host)
    - name: owner
      value: $(body.repository.owner.login)
    - name: sender
      value: $(body.sender.login)
    - name: repository
      value: $(body.repository.name)
    - name: pull_request_url
      value: $(body.issue.pull_request.html_url)
    - name: installation_id
      value: $(body.installation.id)
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: pipelines-as-code-template-retest-comment
  namespace: pipelines-as-code
  labels:
    app.kubernetes.io/instance: default
    app.kubernetes.io/part-of: pipelines-as-code
spec:
  params:
    - name: action
    - name: event_type
    - name: owner
    - name: sender
    - name: repository
    - name: pull_request_url
    - name: installation_id
    - name: trigger_target
    - name: ghe_host
      default: "api.github.com"
  resourcetemplates:
    - apiVersion: tekton.dev/v1beta1
      kind: PipelineRun
      metadata:
        generateName: pipelines-as-code-run-
        labels:
          app.kubernetes.io/managed-by: pipelines-as-code
          tekton.dev/pipelines-as-code-event: $(tt.params.event_type)
      spec:
        serviceAccountName: pipelines-as-code-sa-el
        params:
          - name: action
            value: $(tt.params.action)
          - name: event_type
            value: $(tt.params.event_type)
          - name: ghe_host
            value: $(tt.params.ghe_host)
          - name: owner
            value: $(tt.params.owner)
          - name: sender
            value: $(tt.params.sender)
          - name: repository
            value: $(tt.params.repository)
          - name: pull_request_url
            value: $(tt.params.pull_request_url)
          - name: installation_id
            value: $(tt.params.installation_id)
          - name: trigger_target
            value: $(tt.params.trigger_target)
        pipelineSpec:
          params:
            - name: action
            - name: trigger_target
            - name: ghe_host
            - name: event_type
            - name: owner
            - name: sender
            - name: repository
            - name: pull_request_url
            - name: installation_id
          workspaces:
            - name: secrets
          tasks:
            - name: get-token
              taskRef:
                name: github-app-token
              params:
                - name: github_api_url
                  value: $(params.ghe_host)
                - name: installation_id
                  value: $(params.installation_id)
              workspaces:
                - name: secrets
                  workspace: secrets
            - name: pipelines-as-code
              runAfter: [get-token]
              taskSpec:
                params:
                  - name: action
                    type: string
                  - name: ghe_host
                    type: string
                  - name: event_type
                    type: string
                  - name: owner
                    type: string
                  - name: sender
                    type: string
                  - name: repository
                    type: string
                  - name: pull_request_url
                    type: string
                  - name: token
                    type: string
                  - name: trigger_target
                    type: string
                steps:
                  - name: apply-and-launch
                    imagePullPolicy: Always
                    image: "quay.io/openshift-pipeline/pipelines-as-code:0.1"
                    env:
                    - name: PAC_APPLICATION_NAME
                      valueFrom:
                        configMapKeyRef:
                          name: pipelines-as-code
                          key: application-name
                    script: |
                      env
                      env|grep PAC_APPLICATION_NAME
                      cat << EOF > /tmp/payload.json
                      {
                        "action": "$(params.action)",
                        "issue": {
                          "pull_request": {
                            "html_url": "$(params.pull_request_url)"
                          }
                        },
                        "sender": {
                           "login": "$(params.sender)"
                         },
                        "repository": {
                            "name": "$(params.repository)",
                            "owner": {
                              "login": "$(params.owner)"
                            }
                        }
                      }
                      EOF
                      pipelines-as-code --trigger-target=$(params.trigger_target) \
                        --api-url="$(params.ghe_host)" \
                        --payload-file=/tmp/payload.json --token="$(params.token)" --webhook-type="$(params.event_type)"
              params:
                - name: action
                  value: "$(params.action)"
                - name: ghe_host
                  value: "$(params.ghe_host)"
                - name: trigger_target
                  value: "$(params.trigger_target)"
                - name: event_type
                  value: "$(params.event_type)"
                - name: owner
                  value: "$(params.owner)"
                - name: sender
                  value: "$(params.sender)"
                - name: repository
                  value: "$(params.repository)"
                - name: pull_request_url
                  value: "$(params.pull_request_url)"
                - name: token
                  value: "$(tasks.get-token.results.token)"
        workspaces:
          - name: secrets
            secret:
              secretName: github-app-secret
---
# Copyright 2021 Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerBinding
metadata:
  name: pipelines-as-code-bindings-ok-to-test-comment
  namespace: pipelines-as-code
  labels:
    app.kubernetes.io/instance: default
    app.kubernetes.io/part-of: pipelines-as-code
spec:
  params:
    - name: action
      value: "$(body.action)"
    - name: trigger_target
      value: "ok-to-test-comment"
    - name: event_type
      value: $(header.X-GitHub-Event)
    - name: "ghe_host"
      value: $(header.X-GitHub-Enterprise-Host)
    - name: owner
      value: $(body.repository.owner.login)
    - name: sender
      value: $(body.sender.login)
    - name: repository
      value: $(body.repository.name)
    - name: pull_request_url
      value: $(body.issue.pull_request.html_url)
    - name: installation_id
      value: $(body.installation.id)
---
# Copyright 2021 Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: Syncronized with upstream as 0.2 and https://github.com/tektoncd/catalog/pull/729/

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: github-app-token
  namespace: pipelines-as-code
  labels:
    app.kubernetes.io/instance: default
    app.kubernetes.io/part-of: pipelines-as-code
    app.kubernetes.io/version: "0.2"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: github
    tekton.dev/displayName: "github app token"
spec:
  description: >-
    Retrieve a user token from a GitHub application

    This task will get a user token for an installation_id for a GitHub application.
    This could be then reuse to do user operations.

  workspaces:
    - name: secrets

  results:
    - name: token
      description: The user token to use.

  params:
    - name: installation_id
      description: The installation id for the GitHub application to request a token for.
      type: string

    - name: application_id
      description: The application id for the GitHub application to request a token for.
      type: string
      default: "api.github.com"

    - name: private_key_path
      description: The key path inside the secret workspace
      type: string
      default: "private.key"

    - name: application_id_path
      description: The path for the application id inside the secret workspace
      type: string
      default: "application_id"

    - name: token_expiration_minutes
      description: Token expiration time in minutes
      type: string
      default: "10"

    - name: github_api_url
      description: GitHUB API URL endpoint
      type: string
      default: "api.github.com"

  steps:
    - name: get-token
      image: quay.io/chmouel/github-app-token@sha256:bc45937ae588df876555ebb56c36350ed74592c7f55f2df255cabef39c926a88
      env:
        - name: GITHUBAPP_KEY_PATH
          value: $(workspaces.secrets.path)/$(params.private_key_path)
        - name: GITHUBAPP_APP_ID_PATH
          value: $(workspaces.secrets.path)/$(params.application_id_path)
        - name: GITHUBAPP_APP_ID
          value: $(params.application_id)
        - name: GITHUBAPP_INSTALLATION_ID
          value: $(params.installation_id)
        - name: GITHUBAPP_TOKEN_EXPIRATION_MINUTES
          value: $(params.token_expiration_minutes)
        - name: GITHUBAPP_RESULT_PATH
          value: $(results.token.path)
        - name: GITHUB_API_URL
          value: $(params.github_api_url)
      script: |
        #!/usr/bin/env python3
        import json
        import os
        import time

        import requests
        from jwcrypto import jwk, jwt

        EXPIRE_MINUTES_AS_SECONDS = int(os.environ.get('GITHUBAPP_TOKEN_EXPIRATION_MINUTES', 10)) * 60
        GITHUB_API_URL = "https://" + os.environ.get('GITHUB_API_URL')
        if GITHUB_API_URL != "https://api.github.com":
          GITHUB_API_URL += "/api/v3"

        class GitHub():
            token = None

            def __init__(self, private_key, app_id=None, installation_id=None):
                if not isinstance(private_key, bytes):
                    raise ValueError(f'"{private_key}" parameter must be byte-string')
                self._private_key = private_key
                self.app_id = app_id
                self.token = self._get_token(installation_id)

            def _load_private_key(self, pem_key_bytes):
                return jwk.JWK.from_pem(pem_key_bytes)

            def _app_token(self, expire_in=EXPIRE_MINUTES_AS_SECONDS):
                key = self._load_private_key(self._private_key)
                now = int(time.time())
                token = jwt.JWT(
                    header={"alg": "RS256"},
                    claims={
                        "iat": now,
                        "exp": now + expire_in,
                        "iss": self.app_id
                    },
                    algs=["RS256"],
                )
                token.make_signed_token(key)
                return token.serialize()

            def _get_token(self, installation_id=None):
                app_token = self._app_token()
                if not installation_id:
                    return app_token

                req = self._request(
                    "POST",
                    f"/app/installations/{installation_id}/access_tokens",
                    headers={
                        "Authorization": f"Bearer {app_token}",
                        "Accept": "application/vnd.github.machine-man-preview+json"
                    })
                if not req.text.strip():
                    raise Exception("Not getting a json: code: %s reason: %s" %
                    (req.status_code, req.reason))
                ret = req.json()
                if 'token' not in ret:
                    raise Exception(f"Authentication errors: {req.text}")

                return ret['token']

            def _request(self, method, url, headers={}, data={}):
                if self.token and 'Authorization' not in headers:
                    headers.update({"Authorization": "Bearer " + self.token})
                if not url.startswith("http"):
                    url = f"{GITHUB_API_URL}{url}"
                return requests.request(method,
                                        url,
                                        headers=headers,
                                        data=json.dumps(data))

        def main():
            with open(os.environ['GITHUBAPP_KEY_PATH'], 'rb') as key_file:
                key = key_file.read()

            if os.path.exists(os.environ['GITHUBAPP_APP_ID_PATH']):
                app_id = open(os.environ['GITHUBAPP_APP_ID_PATH']).read()
            elif os.environ.get('GITHUBAPP_APP_ID'):
                app_id = os.environ['GITHUBAPP_APP_ID']
            else:
                raise Exception("application id is not set")

            print(f"Getting user token for application_id: {app_id}")
            github_app = GitHub(
                key,
                app_id=app_id,
                installation_id=os.environ.get('GITHUBAPP_INSTALLATION_ID'))
            open(os.environ.get('GITHUBAPP_RESULT_PATH'), 'w').write(github_app.token)

        if __name__ == '__main__':
            main()